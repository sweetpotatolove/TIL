'''
numbers 리스트에 1부터 10까지의 정수를 할당한다.
'''
# 가장 기본 적인 방법 - 직접 손으로 할당
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# range를 사용해서 쉽게 연속된 정수 시퀀스 형성 가능하다.
numbers = range(1, 11)
print(numbers) # range(1, 11)
# range를 우리가 리스트처럼 사용하고 싶다면 -> list로 형변환을 해주자.
# range 객체가 가지고 있는 요소들을 적절하게, list로 형변환이 가능하다.
# 명시적 형 변환이란 이것을 의미한다.
# 내가 명시적으로 range type의 데이터를 list 형태로 바꾸었다.
numbers = list(range(1, 11))
print(numbers) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# 이걸 일일히 다 풀어서 써보자.
numbers = []    # 빈 리스트를 초기화한다.
# 1부터 10까지의 정수를 반복해서 numbers에 삽입한다.
for i in range(1, 11):
    numbers.append(i)
print(numbers)

# 리스트 컴프리헨션을 연습하기 위해서 풀어써 봤다.
# 위에서 했었던 일이 무엇이냐!
# 1. 어떠한 리스트를 초기화 한다.
# 2. 그 리스트에 삽입해야 할 요소들을 for문으로 순회했다.
# 3. 순회하는 값들을 차례대로 1번에서 선언한 리스트에 삽입한다.

# 우리가 리스트를 선언 하는 방법?
# var = [대괄호 안에 삽입하고자 하는 요소들을 작성한다.]
# 즉, `for i in range(1, 11)` 이 반복문을 순회하면서 얻을 수 있는 임시변수 i
    # 그 i에 할당될 각 값들을 list에 넣고 싶다.
# for문 순회해서 얻은 값들을 대괄호 [] 안에 모두 집어넣기.
# 대괄호로 묶어주는 것 -> python에서 리스트로 초기화 하는 방법
numbers = [i for i in range(1, 11)]

'''
순회 시작! 
numbers 리스트의 각 요소를 순회하며, 짝수일 경우 해당 숫자를 출력한다.
    if item == 짝수 : print
numbers 리스트의 각 요소를 순회하며, 홀수일 경우 해당 숫자를 '홀수'로 출력한다.
    if item == 홀수 : print('홀수')
numbers 리스트의 각 요소를 순회하며, 숫자가 5일 경우 반복을 종료한다.
    if item == 5 : for break
'''
for num in numbers: # 순회 시작
    # 짝수임을 알 수 있는 방법은? 2로 나누었을떄 나누어 떨어지면 짝수다.
    if num % 2 == 0:    # 짝수
        print(num)
    # 2로 나누었으나 1이 남는 경우 -> 홀수
    if num % 2 == 1:    # 홀수
        print('홀수')
    # 5인경우, 홀수가 출력되기 전에 먼저 종료가 되어야한다.
    # if 문의 순서가 틀린 것 같다. -> 코드를 수정하면된다.
    if num == 5:
        break
# num == 5 냐는 사실을 `홀수`인지를 판단하기 전에 먼저 물어봐야겠다.
# elif, else는 언제 쓰면 좋을까?
# 그리고 위의 방식처럼 모두 if로 쓰면 안좋은걸까?
    # 상황에 따라 달라진다.
    # 각각의 조건이 서로 어떠한 연관관계를 가지고 있다면 당연하게도 if, elif, else를 사용하는 쪽이 효율적이다.
    # 왜냐? if, if, if 3번 조건 물어보는 것 보다
    # 첫번째 if의 조건이 True였다 -> 해당하는 영역의 코드를 실행시키기만 하고, elif 조건 평가 할 필요 없음.
# 근데, 이 각각의 if 관의 상관 관계가 사실 서로 큰 영향이 없다면?
for num in numbers:
    '''
        # for문의 종료조건인 `num == 5` 라는 조건은
        # 이후 실행되어야 할, 짝수냐 홀수냐 라는 곳에 영향을 전혀 미치지도 관계도 전혀 없다.
        # 그러한 경우, 즉... 밑에 추가되는 각 조건에 아무런 영향도 미치지 않는다면,
            # 굳이 elif, else로 연결 시킬 필요가 없다.
        # 차라리, 별개의 if로 구분해 두는 편이 좋다.
        # 왜냐? 가독성을 생각해 보자.
    '''
    if num == 5:
        break
    # 디버깅 측면에서는, 서로 관계가 없거나 적은 if문들은
    # 아예 별개로 관리하는 쪽이 훨씬더 명시적이고, 수정하기에도 편하다.
    # ===
    # 2로 나눈 나머지는 0아니면 1이다.
    # 그러므로, if 다음 elif 말고 else를 쓰는건 어떨까?
        # 써도 상관없다. 본인 편한대로 쓰십쇼.
        # 근데... 조금더 안전하게 관리한다고 생각한다면 elif로 표기해주는게 나을지도?
    # 좀 복잡한 조건문을 쓰기 시작했어... 근데.. 난 당연히 0 아니면 1일줄 알았어.
        # 어 근데 내가 몰랐던 0.5가 있네?
        # 어... if에서 오류난걸까.. else에서 오류난걸까...
    if num % 2 == 0:
        print(num)
    elif num % 2 == 1:
        print('홀수')
    

    # 추가.
    # 나머지가 1 => True  따라서 아래 if를 만족하는 경우는 num이 홀수인 경우다.
    if num % 2: # 이 표현방법 그다지 선호하지 않습니다.
        print('홀수')
    else:
        print(num)
        