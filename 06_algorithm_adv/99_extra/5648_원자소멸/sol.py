import sys
sys.stdin = open('input.txt')

# 주의. 문제에서 뭐... 상으로 이동이  y가 증가라고 했음
'''
- 상: y 가 증가하는 방향
- 하: y 가 감소하는 방향
- 좌: x 가 감소하는 방향
- 우: x 가 증가하는 방향
'''
# 상 하 좌 우
dy = [1, -1, 0, 0]
dx = [0, 0, -1, 1]

T = int(input())
for tc in range(1, T+1):
    # N: 원자 개수
    N = int(input())
    '''
        1초에 1칸 움직이는데... 
        0.5초에 0.5칸씩 움직이게 해서 같은 시간대에 도달하게 하면 되지 않을까?
    '''
    data = []
    for _ in range(N):
        x, y, k, e = map(int, input().split())
        data.append([x*2, y*2, k, e])

    # 최종 방출 에너지
    result = 0
    '''0. 무엇을 얼마나 언제까지 조사할까?
        목표는 모든 원자들이 계속 이동하면서 격자판 위에서 사라지는 경우를 원한다.
        음.. data가 빌때까지 겠구나?
        그러는 와중에, 원자들이 충돌해서 에너지를 방출하면 result + 해줄 것.
    '''
    while data: # 원자가 남아 있는 동안.
        '''1. 이동 방식에 대해 생각하기
            모든 원자가 모든 시간대에 자기가 가진 방향으로 이동 할것
            언젠가 나와 같은 좌표에 서게 된 어떠한 다른 원자와 마주하면 
                그 원자와 내가 모두 소멸 될 것.
        '''
        for i in range(len(data)):
            # data[i][0] => x 좌표
            # data[i][1] => y 좌표
            # data[i][2] => 방향
            data[i][0] += dx[data[i][2]]
            data[i][1] += dy[data[i][2]]
        '''2. 이동을 한다는 것은?
            - 아마, 내가 이동한 그 좌표에 다른 원자가 있는지 생각해 볼것
                - 그럼... 내가 가진 data를 매번 이동할때마다 조사? 할 ? 필요? 있나?
            - 이번에 이동하려는 그 위치...에 모이는 애들이 있는지 보면 되지 않을까?
                - (nx, ny)에 이번 이동: 이번 while 중에 동일한 좌표에 모이는 모든 데이터들 수집
                - 아.. 좌표를 기준으로 데이터를 수집?
                (nx, ny) -> [(x1, y1), (x2, y2) .... ]
        '''
        # (nx, ny) -> [(x1, y1), (x2, y2) .... ]
        positions = {}
        for i in range(len(data)):
            x, y, _, _ = data[i]    # x, y 좌표만 쓸겅미
            # 저기 딕셔너리에 (x, y)가 있으면... 내 원소 번호 집어넣고
            # 없으면... 새로 만들어서 리스트에 (x, y) 집어넣고
            positions[(x, y)] = positions.get((x, y), []) + [i]
        '''3. 이동이 끝나고 난 후에는?
            아까 모았던 (nx, ny) -> [(x1, y1), (x2, y2) .... ] 여기
            여기에 값들이 여러개 있으면 없에면 되지 않을까?
            # 사라져야 할 애들은 또 사라질 애들끼리 따로 모으면 되지 않을까?
        '''
        remove_set = set()
        for pos, atoms in positions.items():
            if len(atoms) > 1:  # 2개 이상이 지금 동일 좌표에 들어있다?
                for i in atoms: # 그 리스트 안에 들어있는 원자 번호를 인덱스로해서
                    result += data[i][3]    # 값 더하기
                    remove_set.add(i)       # 사라질 친구들 인덱스 모으자
        '''4. 사라진 애들 빼고 data 재 구성
            사라진 애들 빼고 정상적으로 남아 있을 애들만 리스트에 다시 모으자
            사라지는 애들이란게... 충돌나야만 사라지나?
            또 누가 사라지나?
                1. 범위를 벗어난 애들도 다 사라짐!
                    - 지도의 범위? 즉, 처음에 주어지는 좌푯값 범위
                    - -1000 <= x, y <= 1000
                        - 근데 처음에 1초를 2배로 늘려서 계산하기로 해서
                    - -2000 <= x, y <= 2000 이 범위를 벗어난 애들 다 사라짐!
                2. 그리고 위에서 충돌나서 remove_set에 들어간 애들도 다 사라짐!
        '''
        new_data = []   # 살아 남아 있는 애들만 모으기
        for i in range(len(data)):
            if i not in remove_set and abs(data[i][0]) <= 2000 and abs(data[i][1]) <= 2000:
                new_data.append(data[i])
        # 살아 남은 애들로만 data 갱신
        data = new_data


    print(f'#{tc} {result}')